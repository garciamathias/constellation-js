
.auth-container {
    width: 100%;
    height: 100vh;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    background-color: var(--container-bg);
}

.auth-form {
    background-color: rgba(32, 32, 32, 0.3);
    backdrop-filter: blur(10px);
    padding: 40px;
    border-radius: 20px;
    border: 1px solid rgba(255, 255, 255, 0.1);
    width: 100%;
    max-width: 400px;
}

.auth-form h2 {
    text-align: center;
    margin-bottom: 30px;
    color: rgba(255, 255, 255, 0.9);
}

.auth-form input {
    width: 100%; /* Même largeur que le bouton */
    padding: 15px;
    margin-bottom: 20px;
    background-color: rgba(32, 32, 32, 0.3);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 12px;
    color: rgba(255, 255, 255, 0.9);
    font-size: 16px;
    box-sizing: border-box; /* Garantit que padding est inclus dans la largeur */
}

.auth-form button {
    width: 100%;
    padding: 15px;
    background-color: rgba(32, 32, 32, 0.8);
    color: white;
    border: none;
    border-radius: 12px;
    font-size: 16px;
    cursor: pointer;
    margin-top: 10px;
}

.auth-form button:hover {
    background-color: rgba(45, 45, 45, 0.8);
}

.auth-form p {
    text-align: center;
    margin-top: 20px;
    color: rgba(255, 255, 255, 0.6);
}

.auth-form a {
    color: rgba(255, 255, 255, 0.9);
    text-decoration: none;
}

.auth-form a:hover {
    text-decoration: underline;
}

.logo-container {
    text-align: center;
    margin-bottom: 30px;
}

.logo-container img {
    width: 80px;
    height: 80px;
}

:root {
    --bg-color: #000000;
    --container-bg: #000000;
    --message-bg: rgba(32, 32, 32, 0.3);
    --user-bubble-bg: rgba(32, 32, 32, 0.5);
    --input-bg: rgba(32, 32, 32, 0.3);
    --font-color: #ffffff;
    --border-color: rgba(255, 255, 255, 0.1);
    --input-border-radius: 12px;
}

body {
    margin: 0;
    padding: 0;
    font-family: 'Inter', sans-serif;
    background-color: var(--bg-color);
    color: var(--font-color);
    height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
    line-height: 1.5;
    font-size: 17px;
}

/* Mode sombre */
@media (prefers-color-scheme: dark) {
    :root {
        --bg-color: #000000;
        --container-bg: #000000;
    }
}

.input-container {
    position: center;
    bottom: 0;
    left: 0;
    right: 0;
    padding: 5px 20% 5px 20%;
    background: linear-gradient(to top, rgba(0,0,0,0.95) 0%, rgba(0,0,0,0) 100%);
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 5px;
}

textarea {
    width: 100%;
    background-color: rgba(32, 32, 32, 0.3);
    border: 1px solid rgba(255, 255, 255, 0.1);
    border-radius: 20px;
    padding: 15px 55px 15px 15px;
    resize: none;
    color: rgba(255, 255, 255, 0.9);
    font-size: 17px;
    min-height: 80px;
    max-height: 80px;
    line-height: 1.5;
    backdrop-filter: blur(10px);
    font-family: 'Inter', sans-serif;
}

textarea:focus {
    outline: none;
    background-color: rgba(32, 32, 32, 0.3);
    border-color: rgba(255, 255, 255, 0.186);
}

textarea::placeholder {
    color: rgba(255, 255, 255, 0.5);
}

.input-wrapper {
    max-width: 800px;
    width: 100%;
    margin: 0 auto;
    position: relative;
    display: flex;
    gap: 12px;
}

.input-buttons {
    position: absolute;
    right: 13px;
    top: 50%;
    transform: translateY(-50%);
    display: flex;
    flex-direction: column;
    gap: 10px;
    align-items: center;
    z-index: 2;
}

.input-buttons button {
    background-color: rgba(32, 32, 32, 0.8);
    border-radius: 12px;
    border: none;
    padding: 12px;
    cursor: pointer;
    opacity: 1;
    transition: opacity 0.2s;
    width: 40px;
    height: 40px;
    display: flex;
    justify-content: center;
    align-items: center;
}

.input-buttons button:hover {
    background-color: rgba(45, 45, 45, 0.8);
    opacity: 1;
}

.input-buttons img {
    width: 30px;
    height: 30px;
    filter: invert(0);
    opacity: 1;
}

.disclaimer-wrapper {
    width: 100%;
    max-width: 800px;
    display: flex;
    justify-content: center;
}

.disclaimer {
    text-align: center;
    color: rgb(149, 149, 149);
    font-size: 12px;
}

.chat-container {
    width: 100%;
    height: 100vh;
    background-color: var(--container-bg);
    display: flex;
    flex-direction: column;
    position: relative;
}

.chat-header {
    padding: 5px 10px;
    display: flex;
    justify-content: flex-end;
    align-items: center;
    background: transparent;
    backdrop-filter: none;
    border-bottom: none;
    min-height: 46px;
}

.profile-menu {
    position: fixed;
    top: 15px;
    right: 25px;
    z-index: 1000;
}

.profile-button {
    cursor: pointer;
    transition: transform 0.2s ease, opacity 0.2s ease;
}

.profile-button:hover {
    opacity: 0.9;
    transform: scale(1.05);
}

.profile-image {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    border: 1px solid rgba(255, 255, 255, 0.15);
    background: rgba(32, 32, 32, 0.4);
    backdrop-filter: blur(8px);
    transition: border-color 0.2s ease;
}

.profile-button:hover .profile-image {
    border-color: rgba(255, 255, 255, 0.25);
}

.dropdown-menu {
    position: absolute;
    top: calc(100% + 8px);
    right: 0;
    background: rgba(32, 32, 32, 0.85);
    border: 1px solid rgba(255, 255, 255, 0.15);
    border-radius: 12px;
    padding: 6px;
    display: none;
    backdrop-filter: blur(12px);
    min-width: 200px;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
}

.dropdown-menu.active {
    display: block;
    animation: menuFadeIn 0.2s ease;
}

@keyframes menuFadeIn {
    from {
        opacity: 0;
        transform: translateY(-5px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.dropdown-item {
    display: flex;
    align-items: center;
    gap: 12px;
    padding: 12px;
    width: 100%;
    color: rgba(255, 255, 255, 0.9);
    background: transparent;
    border: none;
    border-radius: 8px;
    cursor: pointer;
    transition: all 0.2s ease;
    font-size: 14px;
}

.dropdown-item:hover {
    background: rgba(255, 255, 255, 0.1);
    transform: translateX(2px);
}

.menu-icon {
    width: 16px;
    height: 16px;
    filter: invert(0);
    opacity: 0.8;
}

.chat-main {
    flex: 1;
    display: flex;
    flex-direction: column;
    overflow: hidden;
    padding: 0 20%;
}

.chat-box {
    flex: 1;
    overflow-y: auto;
    padding: 5px;
}

/* Style pour les éléments Markdown */
.message.bot {
    line-height: 1.6;
}

.message.bot p {
    margin: 0.8em 0;
}

.message.bot strong {
    font-weight: 600;
}

.message.bot em {
    font-style: italic;
}

.message.bot code {
    background-color: rgba(50, 50, 50, 0.8); /* Slightly darker background */
    padding: 2px 6px; /* Adjust padding */
    border-radius: 4px; /* Adjust border radius */
    font-family: 'JetBrains Mono', 'Fira Code', monospace; /* Change font for better readability */
    color: #ffffff; /* Distinctive text color */
    font-size: 0.95em; /* Slightly smaller font size */
}

.message.bot pre {
    background-color: rgba(30, 30, 30, 0.8); /* Darker background for better contrast */
    padding: 1.2em; /* Increased padding for better readability */
    border-radius: 10px; /* Slightly larger border radius */
    overflow-x: auto;
    margin: 1.5em 0; /* Plus d'espace avant/après les blocs de code */
    color: #e6e6e6; /* Lighter text color */
    font-size: 0.95em; /* Slightly smaller font size */
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2); /* Ajoute une ombre légère */
}

/* Style des blocs de code */
.code-block-wrapper {
    position: relative;
    margin: 1.5em 0; /* Plus d'espace autour des blocs de code */
}

.message.bot pre code {
    background: transparent;
    padding: 0;
    font-family: 'JetBrains Mono', 'Fira Code', monospace;
    font-size: 14px;
    line-height: 1.5;
}

.code-toolbar {
    position: relative;
}

/* Styles pour les tableaux */
.table-container {
    width: 100%;
    overflow-x: auto;
    margin: 1.5em 0; /* Plus d'espace autour des tableaux */
    border-radius: 6px;
    background: rgba(32, 32, 32, 0.4);
    border: 1px solid rgba(255, 255, 255, 0.1);
}

.message.bot table {
    width: 100%;
    border-collapse: separate;
    border-spacing: 0;
    font-size: 0.9em;
    margin: 0.5em 0;
    line-height: 1.5; /* Meilleur espacement dans les tableaux */
}

.message.bot th {
    background: rgba(45, 45, 45, 0.6);
    color: rgba(255, 255, 255, 0.9);
    font-weight: 500;
    padding: 8px 12px;
    text-align: left;
    border-bottom: 1px solid rgba(255, 255, 255, 0.1);
    border-right: 1px solid rgba(255, 255, 255, 0.1);
}

.message.bot td {
    padding: 8px 12px;
    border-bottom: 1px solid rgba(255, 255, 255, 0.07);
    border-right: 1px solid rgba(255, 255, 255, 0.07);
    color: rgba(255, 255, 255, 0.75);
}

.message.bot th:last-child,
.message.bot td:last-child {
    border-right: none;
}

.message.bot tr:last-child td {
    border-bottom: none;
}

.message.bot tr:hover td {
    background: rgba(255, 255, 255, 0.03);
    transition: background-color 0.15s ease;
}

/* Supprimer les styles redondants */
.message.bot .table-container {
    width: 100%;
    overflow-x: auto;
    -webkit-overflow-scrolling: touch;
    scrollbar-width: thin;
}

/* Style minimal pour la scrollbar */
.message.bot .table-container::-webkit-scrollbar {
    height: 6px;
}

.message.bot .table-container::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.05);
}

.message.bot .table-container::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 3px;
}

/* Ajout de styles pour les listes */
.message.bot ul, 
.message.bot ol {
    margin: 1em 0 1em 1.5em; /* Espacement des listes */
    padding-left: 0.5em;
}

.message.bot li {
    margin: 0.5em 0; /* Espacement entre les éléments de liste */
}

/* Ajout de styles pour les titres */
.message.bot h1, 
.message.bot h2, 
.message.bot h3, 
.message.bot h4 {
    margin: 1.2em 0 0.8em 0; /* Plus d'espace autour des titres */
    line-height: 1.2;
}

/* Ajout de styles pour les blockquotes */
.message.bot blockquote {
    margin: 1.2em 0;
    padding: 0.8em 1.2em;
    border-left: 4px solid rgba(255, 255, 255, 0.2);
    background: rgba(255, 255, 255, 0.05);
    border-radius: 4px;
}

/* Ajout de styles pour les séparateurs horizontaux */
.message.bot hr {
    margin: 2em 0;
    border: none;
    height: 1px;
    background: linear-gradient(
        to right,
        rgba(255, 255, 255, 0.05),
        rgba(255, 255, 255, 0.2),
        rgba(255, 255, 255, 0.05)
    );
}

/* Styles pour les formules mathématiques */
.mjx-chtml {
    font-size: 1.1em !important;
    color: rgba(255, 255, 255, 0.9) !important;
    margin: 1em 0;
}

.mjx-chtml.MJXc-display {
    margin: 1.5em 0 !important;
    padding: 0.5em 0;
    overflow-x: auto;
    overflow-y: hidden;
}

/* Style pour les formules en ligne */
.message.bot p .mjx-chtml {
    margin: 0 0.2em !important;
}

/* Style pour la bulle de l'utilisateur */
.message.user {
    background-color: var(--user-bubble-bg);
    border-radius: 20px;
    padding: 10px 20px;
    margin: 0;
    max-width: 85%;   /* Même largeur max que les messages du bot */
    margin-left: auto;
    margin-right: 0;  /* Reset de la marge droite */
    font-size: 17px;
    color: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(10px);
}

/* Style pour la réponse du modèle (sans bulle) */
.message.bot {
    background: transparent;
    padding: 0;
    margin: 0; 
    max-width: 85%;
    color: rgba(255, 255, 255, 0.9);
    font-size: 17px;
    line-height: 1.6;
}

/* Container pour le message et le logo */
.message-container {
    display: flex;
    align-items: flex-start;
    gap: 12px;
    margin: 25px 0;
}

/* Style pour le conteneur du logo */
.message-logo {
    flex-shrink: 0;
    width: 40px;
    height: 40px;
}

.message-logo img {
    width: 100%;
    height: 100%;
    object-fit: contain;
}

/* Alignement des messages utilisateur à droite */
.user-container {
    justify-content: flex-end;
}

/* Cache le logo pour les messages utilisateur */
.user-container .message-logo {
    display: none;
    scroll-margin-top: 0 !important;
    scroll-behavior: auto !important;
}

.message.bot pre code {
    background: transparent;
    padding: 0;
    border-radius: 0;
    font-family: 'JetBrains Mono', 'Fira Code', 'Courier New', monospace;
}

/* Espacement pour le texte autour des formules */
.message.bot p {
    margin: 1em 0;
    line-height: 1.6;
}

/* Style pour séparer visuellement les sections de calcul */
.message.bot hr {
    border: none;
    border-top: 1px solid rgba(255, 255, 255, 0.1);
    margin: 2em 0;
}

/* Ajuster les marges du premier paragraphe */
.message.bot > p:first-child {
    margin-top: 0;
}

/* Style personnalisé pour Prism.js */
.token.comment,
.token.prolog,
.token.doctype,
.token.cdata {
    color: #6a9955;
}

.token.function {
    color: #dcdcaa;
}

.token.keyword {
    color: #569cd6;
}

.token.string {
    color: #ce9178;
}

.token.number {
    color: #b5cea8;
}

pre[class*="language-"] {
    position: relative;
}

div.code-toolbar > .toolbar {
    position: absolute;
    top: 5px;
    right: 5px;
    opacity: 1 !important;
    transition: none;
}

div.code-toolbar > .toolbar > .toolbar-item > button {
    background-color: rgba(255, 255, 255, 0.1) !important;
    color: rgba(255, 255, 255, 0.8) !important;
    padding: 6px 12px !important;
    border-radius: 6px !important;
    font-family: 'Inter', sans-serif !important;
    font-size: 12px !important;
    border: 1px solid rgba(255, 255, 255, 0.2) !important;
    backdrop-filter: blur(8px);
    transition: all 0.2s ease !important;
    text-decoration: none !important;
    cursor: pointer !important;
    box-shadow: none !important;
}

div.code-toolbar > .toolbar > .toolbar-item > button:hover {
    background-color: rgba(255, 255, 255, 0.15) !important;
    color: rgba(255, 255, 255, 1) !important;
    border-color: rgba(255, 255, 255, 0.3) !important;
}

div.code-toolbar > .toolbar > .toolbar-item > button[data-copy-state="copy"] {
    background-color: rgba(46, 160, 67, 0.2) !important;
    border-color: rgba(46, 160, 67, 0.4) !important;
    color: rgba(46, 160, 67, 1) !important;
}

/* Nouvelle classe pour l'animation */
div.code-toolbar > .toolbar > .toolbar-item > button.copy-animation {
    animation: copyFeedback 0.3s ease forwards;
}

@keyframes copyFeedback {
    0% { transform: scale(1); }
    50% { transform: scale(1.1); }
    100% { transform: scale(1); }
}

div.code-toolbar > .toolbar > .toolbar-item > button,
div.code-toolbar > .toolbar > .toolbar-item > a {
    text-decoration: none !important;
    cursor: pointer !important;
}

.toolbar-item button,
.toolbar-item a {
    pointer-events: auto !important;
}

div.code-toolbar > .toolbar > .toolbar-item > button[data-copy-state] {
    scroll-behavior: auto !important;
    scroll-margin: 0 !important;
}

/* Scrollbar */
::-webkit-scrollbar {
    width: 5px;
}

::-webkit-scrollbar-track {
    background: transparent;
}

::-webkit-scrollbar-thumb {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 3px;
}

/* Theme switcher */
.theme-switcher {
    position: fixed;
    bottom: 20px;
    right: 20px;
    opacity: 0.6;
    cursor: pointer;
}

.theme-switcher img {
    width: 24px;
    height: 24px;
    filter: invert(1);
}

/* Message actions */
.message-actions {
    display: flex;
    gap: 15px;
    margin-top: 10px;
    opacity: 0.6;
}

.message-actions img {
    width: 16px;
    height: 16px;
    cursor: pointer;
    filter: invert(1);
}

button {
    background: transparent;
    border: none;
    padding: 8px;
    cursor: pointer;
    opacity: 0.6;
    transition: opacity 0.2s;
}

button:hover {
    opacity: 1;
}

button img {
    width: 20px;
    height: 20px;
    filter: invert(1);
}

.input-actions {
    position: absolute;
    right: calc(20% + 15px);
    display: flex;
    gap: 10px;
    align-items: center;
}


/**
 * messageUI.js - Gestion de l'affichage des messages
 */

import { 
    protectLatexFormulas, 
    restoreLatexFormulas, 
    containsLatex,
    renderMathJax,
    sanitizeMathContent
} from '../utils/mathUtils.js';

/**
 * Ajoute un message dans la fenêtre de chat
 */
export async function addMessage(content, type, elements) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message-container ${type}-container`;

    if (type === 'bot') {
        messageDiv.appendChild(createBotLogo());
    }

    const contentDiv = document.createElement('div');
    contentDiv.className = `message ${type}`;

    if (type === 'bot') {
        await renderBotMessage(contentDiv, content);
    } else {
        contentDiv.textContent = content;
    }

    messageDiv.appendChild(contentDiv);
    elements.chatBox.appendChild(messageDiv);
    elements.chatBox.scrollTop = elements.chatBox.scrollHeight;
}

/**
 * Crée le logo pour les messages du bot
 */
function createBotLogo() {
    const logoDiv = document.createElement('div');
    logoDiv.className = 'message-logo';
    const logoImg = document.createElement('img');
    logoImg.src = '/static/images/logo.png';
    logoImg.alt = 'Logo Constellation';
    logoDiv.appendChild(logoImg);
    return logoDiv;
}

/**
 * Ajoute les classes de langage par défaut aux blocs de code
 */
function addDefaultLanguageClass(tempDiv) {
    tempDiv.querySelectorAll('pre code:not([class*="language-"])').forEach(block => {
        block.className = 'language-plaintext';
    });
}

/**
 * Ajoute les wrappers pour les blocs de code
 */
function addCodeWrappers(tempDiv) {
    tempDiv.querySelectorAll('pre').forEach(pre => {
        const wrapper = document.createElement('div');
        wrapper.className = 'code-block-wrapper';
        wrapper.style.position = 'relative';
        pre.parentNode.insertBefore(wrapper, pre);
        wrapper.appendChild(pre);
    });
}

/**
 * Effectue le rendu complet d'un message du bot
 */
async function renderBotMessage(contentDiv, content) {
    try {
        await renderStreamingChunk(contentDiv, content);
    } catch (error) {
        console.error('Error rendering bot message:', error);
        contentDiv.textContent = 'Une erreur est survenue lors du rendu du message.';
    }
}

/**
 * Effectue le rendu en temps réel d'un chunk de texte
 */
export async function renderStreamingChunk(contentDiv, content) {
    try {
        const sanitizedContent = sanitizeMarkdown(content);
        const protectedContent = protectLatexFormulas(sanitizedContent);
        const htmlContent = marked.parse(protectedContent);

        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = htmlContent;

        // Ajouter le wrapper pour les tableaux
        tempDiv.querySelectorAll('table').forEach(table => {
            const wrapper = document.createElement('div');
            wrapper.className = 'table-container';
            table.parentNode.insertBefore(wrapper, table);
            wrapper.appendChild(table);
        });

        addDefaultLanguageClass(tempDiv);
        addCodeWrappers(tempDiv);

        const finalContent = restoreLatexFormulas(tempDiv.innerHTML);
        contentDiv.innerHTML = finalContent;

        if (containsLatex(content)) {
            await renderMathJax(contentDiv);
        }
        if (containsCodeBlocks(content)) {
            Prism.highlightAllUnder(contentDiv);
        }
    } catch (error) {
        console.error('Error rendering stream chunk:', error);
    }
}

/**
 * Crée un élément de toolbar pour les blocs de code
 */
export function createCodeToolbar(codeBlock) {
    const toolbar = document.createElement('div');
    toolbar.className = 'code-toolbar';
    
    const toolbarItem = document.createElement('div');
    toolbarItem.className = 'toolbar-item';
    
    const copyButton = document.createElement('button');
    copyButton.textContent = 'Copier';
    copyButton.onclick = () => {
        navigator.clipboard.writeText(codeBlock.textContent)
            .then(() => {
                copyButton.textContent = 'Copié !';
                setTimeout(() => {
                    copyButton.textContent = 'Copier';
                }, 2000);
            })
            .catch(err => {
                console.error('Erreur lors de la copie:', err);
                copyButton.textContent = 'Erreur';
            });
    };
    
    toolbarItem.appendChild(copyButton);
    toolbar.appendChild(toolbarItem);
    return toolbar;
}

/**
 * Nettoie le contenu Markdown des éléments potentiellement dangereux
 */
function sanitizeMarkdown(content) {
    return content
        .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '')
        .replace(/<iframe\b[^<]*(?:(?!<\/iframe>)<[^<]*)*<\/iframe>/gi, '')
        .replace(/<style\b[^<]*(?:(?!<\/style>)<[^<]*)*<\/style>/gi, '');
}

/**
 * Vérifie si le message contient des blocs de code
 */
function containsCodeBlocks(content) {
    return /```[\s\S]*?```/g.test(content);
}

/**
 * Met à jour l'état de chargement d'un message
 */
export function updateMessageLoadingState(messageDiv, isLoading) {
    if (isLoading) {
        messageDiv.classList.add('loading');
    } else {
        messageDiv.classList.remove('loading');
    }
}

export function adjustTextareaHeight(textarea) {
    textarea.style.height = 'auto';
    textarea.style.height = Math.min(textarea.scrollHeight, 150) + 'px';
}

export function setupTextareaHandlers(textarea, sendCallback) {
    textarea.addEventListener('input', () => adjustTextareaHeight(textarea));
    textarea.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendCallback();
        }
    });
}


<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Constellation</title>
    <link rel="stylesheet" href="/static/css/base.css">
    <link rel="stylesheet" href="/static/css/layout.css">
    <link rel="stylesheet" href="/static/css/messages.css">
    <link rel="stylesheet" href="/static/css/input.css">
    <link rel="stylesheet" href="/static/css/markdown.css">
    <link rel="stylesheet" href="/static/css/math.css">
    <link rel="stylesheet" href="/static/css/prism-custom.css">
    <link rel="stylesheet" href="/static/css/utilities.css">
    <link rel="icon" href="/static/images/logo.png" type="image/x-icon">

    <!-- Prism.js CSS -->
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/themes/prism-tomorrow.min.css" rel="stylesheet" />

    <!-- Prism.js Core -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/prism.min.js"></script>

    <!-- Composants linguistiques -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-python.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-java.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-cpp.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-css.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-javascript.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-markup.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-bash.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-json.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-yaml.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-sql.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-docker.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-nginx.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-toml.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-tex.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-regex.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-diff.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-graphql.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/components/prism-toml.min.js"></script>

    <!-- Prism.js Toolbar Plugin (obligatoire pour Copy-to-Clipboard) -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/toolbar/prism-toolbar.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/toolbar/prism-toolbar.min.css" rel="stylesheet" />
    
    <!-- Prism.js Copy-to-Clipboard Plugin -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/copy-to-clipboard/prism-copy-to-clipboard.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/prism/1.29.0/plugins/copy-to-clipboard/prism-copy-to-clipboard.min.css" rel="stylesheet" />

    <!-- Firebase App (obligatoire) -->
    <script src="https://www.gstatic.com/firebasejs/9.x.x/firebase-app-compat.js"></script>
    <!-- Firebase Auth -->
    <script src="https://www.gstatic.com/firebasejs/9.x.x/firebase-auth-compat.js"></script>

    <!-- Configuration MathJax -->
    <script>
        window.MathJax = {
            tex: {
                inlineMath: [['$', '$'], ['\\(', '\\)']],
                displayMath: [['$$', '$$'], ['\\[', '\\]']],
                processEscapes: true
            },
            svg: {
                fontCache: 'global'
            },
            options: {
                enableMenu: false
            }
        };
    </script>
    <script src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
</head>
<body>
    <div class="chat-container">
        <div class="profile-menu">
            <div class="profile-button" id="profileButton">
                <img src="/static/images/default-avatar.jpeg" alt="Profile" class="profile-image">
            </div>
            <div class="dropdown-menu" id="dropdownMenu">
                <button id="logout-button" class="dropdown-item">
                    <img src="/static/images/icons/logout-icon.png" alt="Logout" class="menu-icon">
                    Se déconnecter
                </button>
            </div>
        </div>
        
        <div class="chat-main">
            <div id="chat-box" class="chat-box"></div>
            
            <div class="input-container">
                <div class="input-wrapper">
                    <textarea id="message" placeholder="Écrivez votre message..."></textarea>
                    <div class="input-buttons">
                        <button id="send-button">
                            <img src="/static/images/icons/send_icon.png" alt="Send">
                        </button>
                        <button id="attach-button">
                            <img src="/static/images/icons/attachment-icon.png" alt="Attach">
                        </button>
                    </div>
                </div>
                <div class="disclaimer-wrapper">
                    <div class="disclaimer">Constellation peut faire des erreurs. Envisagez de vérifier les informations importantes.</div>
                </div>
            </div>
        </div>
    </div>

    <!-- Marked.js -->
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>
    <script>
        // Configuration de Marked
        marked.setOptions({
            breaks: true,
            gfm: true,
            headerIds: false,
            mangle: false
        });
    </script>

    <!-- Script principal -->
    <script type="module" src="/static/js/main.js"></script>

    <script type="module">
        import { logoutFromFirebase } from '/static/js/firebase-config.js';

        document.getElementById('logout-button').addEventListener('click', async () => {
            try {
                await logoutFromFirebase();
                window.location.href = '/logout';
            } catch (error) {
                alert('Erreur lors de la déconnexion');
            }
        });
    </script>
</body>
</html>