export function configureMarked() {
    marked.setOptions({
        breaks: true,
        gfm: true,
        headerIds: false,
        mangle: false,
        sanitize: false,
    });
}

export function setupScrollObserver(chatBox) {
    const observer = new MutationObserver((mutations) => {
        mutations.forEach((mutation) => {
            if (mutation.addedNodes.length && mutation.addedNodes[0].classList && 
                mutation.addedNodes[0].classList.contains('message-container')) {
                chatBox.scrollTop = chatBox.scrollHeight;
            }
        });
    });

    observer.observe(chatBox, {
        childList: true,
        subtree: true
    });
}

export async function sendMessageToServer(message) {
    try {
        const response = await fetch('/chat', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({ message: message })
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        return await response.json();
    } catch (error) {
        console.error('Error:', error);
        return { error: 'Désolé, une erreur est survenue.' };
    }
}

/**
 * messageUI.js - Gestion de l'affichage des messages
 */

import { 
    protectLatexFormulas, 
    restoreLatexFormulas, 
    containsLatex,
    renderMathJax,
    sanitizeMathContent
} from '../utils/mathUtils.js';

/**
 * Ajoute un message dans la fenêtre de chat
 */
export async function addMessage(content, type, elements) {
    const messageDiv = document.createElement('div');
    messageDiv.className = `message-container ${type}-container`;

    if (type === 'bot') {
        messageDiv.appendChild(createBotLogo());
    }

    const contentDiv = document.createElement('div');
    contentDiv.className = `message ${type}`;

    if (type === 'bot') {
        await renderBotMessage(contentDiv, content);
    } else {
        contentDiv.textContent = content;
    }

    messageDiv.appendChild(contentDiv);
    elements.chatBox.appendChild(messageDiv);
    elements.chatBox.scrollTop = elements.chatBox.scrollHeight;
}

/**
 * Crée le logo pour les messages du bot
 */
function createBotLogo() {
    const logoDiv = document.createElement('div');
    logoDiv.className = 'message-logo';
    const logoImg = document.createElement('img');
    logoImg.src = '/static/images/logo.png';
    logoImg.alt = 'Logo Constellation';
    logoDiv.appendChild(logoImg);
    return logoDiv;
}

/**
 * Ajoute les classes de langage par défaut aux blocs de code
 */
function addDefaultLanguageClass(tempDiv) {
    tempDiv.querySelectorAll('pre code:not([class*="language-"])').forEach(block => {
        block.className = 'language-plaintext';
    });
}

/**
 * Ajoute les wrappers pour les blocs de code
 */
function addCodeWrappers(tempDiv) {
    tempDiv.querySelectorAll('pre').forEach(pre => {
        const wrapper = document.createElement('div');
        wrapper.className = 'code-block-wrapper';
        wrapper.style.position = 'relative';
        pre.parentNode.insertBefore(wrapper, pre);
        wrapper.appendChild(pre);
    });
}

/**
 * Effectue le rendu complet d'un message du bot
 */
async function renderBotMessage(contentDiv, content) {
    try {
        await renderStreamingChunk(contentDiv, content);
    } catch (error) {
        console.error('Error rendering bot message:', error);
        contentDiv.textContent = 'Une erreur est survenue lors du rendu du message.';
    }
}

/**
 * Effectue le rendu en temps réel d'un chunk de texte
 */
export async function renderStreamingChunk(contentDiv, content) {
    try {
        const sanitizedContent = sanitizeMarkdown(content);
        const protectedContent = protectLatexFormulas(sanitizedContent);
        const htmlContent = marked.parse(protectedContent);

        const tempDiv = document.createElement('div');
        tempDiv.innerHTML = htmlContent;

        // Ajouter le wrapper pour les tableaux
        tempDiv.querySelectorAll('table').forEach(table => {
            const wrapper = document.createElement('div');
            wrapper.className = 'table-container';
            table.parentNode.insertBefore(wrapper, table);
            wrapper.appendChild(table);
        });

        addDefaultLanguageClass(tempDiv);
        addCodeWrappers(tempDiv);

        const finalContent = restoreLatexFormulas(tempDiv.innerHTML);
        contentDiv.innerHTML = finalContent;

        if (containsLatex(content)) {
            await renderMathJax(contentDiv);
        }
        if (containsCodeBlocks(content)) {
            Prism.highlightAllUnder(contentDiv);
        }
    } catch (error) {
        console.error('Error rendering stream chunk:', error);
    }
}

/**
 * Crée un élément de toolbar pour les blocs de code
 */
export function createCodeToolbar(codeBlock) {
    const toolbar = document.createElement('div');
    toolbar.className = 'code-toolbar';
    
    const toolbarItem = document.createElement('div');
    toolbarItem.className = 'toolbar-item';
    
    const copyButton = document.createElement('button');
    copyButton.textContent = 'Copier';
    copyButton.onclick = () => {
        navigator.clipboard.writeText(codeBlock.textContent)
            .then(() => {
                copyButton.textContent = 'Copié !';
                setTimeout(() => {
                    copyButton.textContent = 'Copier';
                }, 2000);
            })
            .catch(err => {
                console.error('Erreur lors de la copie:', err);
                copyButton.textContent = 'Erreur';
            });
    };
    
    toolbarItem.appendChild(copyButton);
    toolbar.appendChild(toolbarItem);
    return toolbar;
}

/**
 * Nettoie le contenu Markdown des éléments potentiellement dangereux
 */
function sanitizeMarkdown(content) {
    return content
        .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '')
        .replace(/<iframe\b[^<]*(?:(?!<\/iframe>)<[^<]*)*<\/iframe>/gi, '')
        .replace(/<style\b[^<]*(?:(?!<\/style>)<[^<]*)*<\/style>/gi, '');
}

/**
 * Vérifie si le message contient des blocs de code
 */
function containsCodeBlocks(content) {
    return /```[\s\S]*?```/g.test(content);
}

/**
 * Met à jour l'état de chargement d'un message
 */
export function updateMessageLoadingState(messageDiv, isLoading) {
    if (isLoading) {
        messageDiv.classList.add('loading');
    } else {
        messageDiv.classList.remove('loading');
    }
}

export function adjustTextareaHeight(textarea) {
    textarea.style.height = 'auto';
    textarea.style.height = Math.min(textarea.scrollHeight, 150) + 'px';
}

export function setupTextareaHandlers(textarea, sendCallback) {
    textarea.addEventListener('input', () => adjustTextareaHeight(textarea));
    textarea.addEventListener('keypress', (e) => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            sendCallback();
        }
    });
}

/**
 * mathUtils.js - Gestion des formules mathématiques et LaTeX
 */

/**
 * Protège les formules LaTeX avant le rendu Markdown
 */
export function protectLatexFormulas(content) {
    return content
        .replace(/\\\[([\s\S]*?)\\\]/g, (match, formula) => {
            return `@@LATEX_DISPLAY@@${encodeURIComponent(formula)}@@`;
        })
        .replace(/\\\(([\s\S]*?)\\\)/g, (match, formula) => {
            return `@@LATEX_INLINE@@${encodeURIComponent(formula)}@@`;
        })
        .replace(/\$\$([\s\S]*?)\$\$/g, (match, formula) => {
            return `@@LATEX_DISPLAY@@${encodeURIComponent(formula)}@@`;
        })
        .replace(/\$([\s\S]*?)\$/g, (match, formula) => {
            return `@@LATEX_INLINE@@${encodeURIComponent(formula)}@@`;
        });
}

/**
 * Restaure les formules LaTeX après le rendu Markdown
 */
export function restoreLatexFormulas(content) {
    return content
        .replace(/@@LATEX_DISPLAY@@(.*?)@@/g, (match, formula) => {
            return `\\[${decodeURIComponent(formula)}\\]`;
        })
        .replace(/@@LATEX_INLINE@@(.*?)@@/g, (match, formula) => {
            return `\\(${decodeURIComponent(formula)}\\)`;
        });
}

/**
 * Vérifie si le message contient des formules LaTeX
 */
export function containsLatex(content) {
    return /\\\[|\\\]|\\\(|\\\)|\$\$|\$/g.test(content);
}

/**
 * Effectue le rendu MathJax sur un élément
 */
export async function renderMathJax(element) {
    try {
        await MathJax.typesetPromise([element]);
    } catch (error) {
        console.error('Error rendering MathJax:', error);
        throw error;
    }
}

/**
 * Nettoie le contenu des formules mathématiques
 */
export function sanitizeMathContent(content) {
    // Supprime les balises HTML potentiellement dangereuses dans les formules
    return content.replace(/<[^>]*>/g, '');
}

export function preventCopyButtonScroll(e) {
    if (e.target.matches('.toolbar-item button') || e.target.closest('.toolbar-item button')) {
        e.preventDefault();
    }
}

export function getChatElements() {
    return {
        chatBox: document.getElementById('chat-box'),
        messageInput: document.getElementById('message'),
        sendButton: document.getElementById('send-button')
    };
}

import { configureMarked } from './config/marked.js';
import { preventCopyButtonScroll, getChatElements } from './utils/domUtils.js';
import { setupTextareaHandlers } from './ui/textarea.js';
import { addMessage, renderStreamingChunk } from './ui/messageUI.js';
import { setupScrollObserver } from './observers/scrollObserver.js';
import { getFirestore, collection, addDoc, doc, updateDoc, orderBy, query, getDocs } from "https://www.gstatic.com/firebasejs/9.1.3/firebase-firestore.js";
import { getAuth, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/9.1.3/firebase-auth.js";

function isUserAtBottom(element, threshold = 100) {
    return element.scrollHeight - element.clientHeight - element.scrollTop <= threshold;
}

document.addEventListener('DOMContentLoaded', function() {
    // Configuration initiale
    configureMarked();
    document.addEventListener('click', preventCopyButtonScroll);

    // Récupération des éléments DOM
    const elements = getChatElements();
    const db = getFirestore();
    const auth = getAuth();
    let currentChatId = null;

    // Vérifier l'authentification avant d'initialiser le chat
    onAuthStateChanged(auth, async (user) => {
        if (!user) {
            window.location.href = '/login';
            return;
        }

        // Créer ou récupérer le chat actif
        try {
            if (!currentChatId) {
                await createNewChat();
            }
        } catch (error) {
            console.error('Error initializing chat:', error);
        }
    });

    // Profile dropdown functionality
    const profileButton = document.getElementById('profileButton');
    const dropdownMenu = document.getElementById('dropdownMenu');

    // Toggle dropdown when clicking profile button
    profileButton.addEventListener('click', (e) => {
        e.stopPropagation();
        dropdownMenu.classList.toggle('active');
    });

    // Close dropdown when clicking outside
    document.addEventListener('click', (e) => {
        if (!dropdownMenu.contains(e.target) && !profileButton.contains(e.target)) {
            dropdownMenu.classList.remove('active');
        }
    });

    async function createNewChat() {
        try {
            const chatRef = await addDoc(collection(db, "chats"), {
                userId: auth.currentUser.uid,
                created_at: new Date(),
            });
            currentChatId = chatRef.id;
            return currentChatId;
        } catch (error) {
            console.error('Error creating new chat:', error);
            throw error;
        }
    }

    async function addMessageToFirestore(content, role) {
        if (!currentChatId) {
            await createNewChat();
        }

        const messagesRef = collection(db, "chats", currentChatId, "messages");
        const messageCount = (await getDocs(query(messagesRef, orderBy("message_order", "desc")))).size;

        await addDoc(messagesRef, {
            content: content,
            role: role,
            message_order: messageCount + 1,
            timestamp: new Date()
        });
    }

    async function getSessionMessages() {
        if (!currentChatId) return [];
        
        const messagesRef = collection(db, "chats", currentChatId, "messages");
        const q = query(messagesRef, orderBy("message_order", "asc"));
        const querySnapshot = await getDocs(q);
        
        return querySnapshot.docs.map(doc => ({
            role: doc.data().role,
            content: doc.data().content
        }));
    }

    // Configuration des gestionnaires d'événements
    async function sendMessageWithStreaming() {
        if (!auth.currentUser) {
            console.error('User not authenticated');
            return;
        }

        const message = elements.messageInput.value.trim();
        if (!message) return;

        try {
            // Add user message to Firestore
            await addMessageToFirestore(message, 'user');

            // Get conversation history from Firestore
            const context = await getSessionMessages();

            // Update UI with user message
            await addMessage(message, 'user', elements);
            elements.messageInput.value = '';
            elements.messageInput.style.height = 'auto';

            // Create bot response container
            const messageDiv = document.createElement('div');
            messageDiv.className = 'message-container bot-container';
            
            const logoDiv = document.createElement('div');
            logoDiv.className = 'message-logo';
            const logoImg = document.createElement('img');
            logoImg.src = '/static/images/logo.png';
            logoImg.alt = 'Logo Constellation';
            logoDiv.appendChild(logoImg);
            
            const responseDiv = document.createElement('div');
            responseDiv.className = 'message bot';
            
            messageDiv.appendChild(logoDiv);
            messageDiv.appendChild(responseDiv);
            elements.chatBox.appendChild(messageDiv);
            
            let accumulatedText = '';
            let lastRenderTime = 0;
            const minRenderInterval = 100; // ms
            let wasAtBottom = true; // Track initial scroll position

            const response = await fetch('/stream', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ 
                    prompt: message,
                    context: context 
                })
            });

            const reader = response.body.getReader();
            const decoder = new TextDecoder();

            while (true) {
                const { done, value } = await reader.read();
                if (done) break;

                const chunk = decoder.decode(value);
                const lines = chunk.split('\n');

                for (const line of lines) {
                    if (line.startsWith('data: ')) {
                        const data = JSON.parse(line.slice(6));
                        accumulatedText += data.chunk;
                        
                        const currentTime = Date.now();
                        if (currentTime - lastRenderTime >= minRenderInterval) {
                            wasAtBottom = isUserAtBottom(elements.chatBox); // Check before rendering
                            await renderStreamingChunk(responseDiv, accumulatedText);
                            lastRenderTime = currentTime;
                            
                            // Only scroll if user was already at bottom
                            if (wasAtBottom) {
                                elements.chatBox.scrollTop = elements.chatBox.scrollHeight;
                            }
                        }
                    }
                }
            }
            
            // Rendu final pour s'assurer que tout le contenu est affiché
            if (accumulatedText) {
                wasAtBottom = isUserAtBottom(elements.chatBox);
                await renderStreamingChunk(responseDiv, accumulatedText);
                if (wasAtBottom) {
                    elements.chatBox.scrollTop = elements.chatBox.scrollHeight;
                }
            }

            // Add assistant's response to Firestore after streaming
            if (accumulatedText) {
                await addMessageToFirestore(accumulatedText, 'assistant');
            }

        } catch (error) {
            console.error('Error in sendMessageWithStreaming:', error);
            responseDiv.textContent = 'Une erreur est survenue';
        }
    }

    // Setup des handlers avec vérification de l'authentification
    elements.sendButton?.addEventListener('click', () => {
        if (auth.currentUser) {
            sendMessageWithStreaming();
        }
    });

    if (elements.messageInput) {
        setupTextareaHandlers(elements.messageInput, () => {
            if (auth.currentUser) {
                sendMessageWithStreaming();
            }
        });
    }

    if (elements.chatBox) {
        setupScrollObserver(elements.chatBox);
    }
});